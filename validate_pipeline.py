#!/usr/bin/env python3
"""
Script de valida√ß√£o do pipeline RINDAT
Executa testes abrangentes antes do processamento principal
"""

import os
import sys
import pytest
import tempfile
import shutil
import logging
from datetime import datetime

def run_validation_tests():
    """Executa todos os testes de valida√ß√£o"""
    print("üîç INICIANDO VALIDA√á√ÉO DO PIPELINE RINDAT")
    print("=" * 50)
    print(f"Timestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # Configurar logging para capturar problemas
    logging.basicConfig(level=logging.INFO)
    
    # Executar testes
    test_file = "tests/test_full_pipeline.py"
    
    if not os.path.exists(test_file):
        print(f"‚ùå Arquivo de teste n√£o encontrado: {test_file}")
        return False
    
    print("üß™ Executando testes de valida√ß√£o...")
    
    # Executar pytest com sa√≠da detalhada
    result = pytest.main([
        test_file,
        "-v",
        "--tb=short",
        "--durations=10"
    ])
    
    if result == 0:
        print()
        print("‚úÖ VALIDA√á√ÉO CONCLU√çDA COM SUCESSO!")
        print("‚úÖ Todos os testes passaram - Pipeline est√° pronto para execu√ß√£o")
        print()
        return True
    else:
        print()
        print("‚ùå FALHA NA VALIDA√á√ÉO!")
        print("‚ùå Alguns testes falharam - Corrija os problemas antes de executar o pipeline")
        print()
        return False

def validate_environment():
    """Valida o ambiente antes de executar testes"""
    print("üîß Validando ambiente...")
    
    # Verificar se est√° no diret√≥rio correto
    if not os.path.exists("src/data_processor.py"):
        print("‚ùå Execute este script a partir do diret√≥rio raiz do projeto")
        return False
    
    # Verificar se o ambiente virtual est√° ativo
    if not hasattr(sys, 'real_prefix') and not (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
        print("‚ö†Ô∏è  Ambiente virtual n√£o detectado - certifique-se de ativ√°-lo")
    
    # Verificar bibliotecas essenciais
    try:
        import pandas
        import numpy
        import matplotlib
        import folium
        print("‚úÖ Bibliotecas essenciais encontradas")
    except ImportError as e:
        print(f"‚ùå Biblioteca necess√°ria n√£o encontrada: {e}")
        return False
    
    print("‚úÖ Ambiente validado")
    return True

if __name__ == "__main__":
    try:
        # Validar ambiente
        if not validate_environment():
            sys.exit(1)
        
        # Executar testes de valida√ß√£o
        success = run_validation_tests()
        
        if success:
            print("üöÄ Pipeline validado - pode executar 'python main.py' com seguran√ßa")
            sys.exit(0)
        else:
            print("üõë Pipeline n√£o validado - corrija os problemas antes de continuar")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Valida√ß√£o interrompida pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro inesperado durante valida√ß√£o: {e}")
        sys.exit(1)